// <auto-generated />
using System;
using Api.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220104153856_age")]
    partial class age
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Domain.Entities.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventImage")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<TimeSpan>("EventTime")
                        .HasColumnType("interval");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PeopleAmount")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Api.Domain.Entities.ListSocialMediaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SocialMediaName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ListSocialMedias");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9cec94b-cb72-4edc-a5cd-e63713d0217c"),
                            SocialMediaName = "Facebook"
                        },
                        new
                        {
                            Id = new Guid("8ecaa053-f6cd-4e2e-aecf-418f341ee651"),
                            SocialMediaName = "Instagram"
                        },
                        new
                        {
                            Id = new Guid("7050e179-8fe0-4fa6-97aa-0b9866b8f117"),
                            SocialMediaName = "Gettr"
                        },
                        new
                        {
                            Id = new Guid("c8984d8b-8f4f-45ca-894a-a304436af435"),
                            SocialMediaName = "Telegram"
                        },
                        new
                        {
                            Id = new Guid("ebcc0b13-f7cb-4cc2-8f20-3969d444c318"),
                            SocialMediaName = "WeChat"
                        },
                        new
                        {
                            Id = new Guid("583771e3-66b2-4e51-b546-0fbf6320be63"),
                            SocialMediaName = "QZone"
                        },
                        new
                        {
                            Id = new Guid("971e50d7-9aa4-478c-b892-8f1d71585eae"),
                            SocialMediaName = "Tumblr"
                        },
                        new
                        {
                            Id = new Guid("a9318b9f-5b6b-4247-8059-0205164a612e"),
                            SocialMediaName = "Twitter"
                        },
                        new
                        {
                            Id = new Guid("63d01031-e2fe-4881-bd33-801f7e832bf4"),
                            SocialMediaName = "Google+"
                        },
                        new
                        {
                            Id = new Guid("74f04b4b-b60c-4004-a7b3-3556f6a38751"),
                            SocialMediaName = "Skype"
                        },
                        new
                        {
                            Id = new Guid("f203d490-5eed-4baf-a2f6-6e561d679259"),
                            SocialMediaName = "Viber"
                        },
                        new
                        {
                            Id = new Guid("3cf077ed-bec4-4d72-b2c4-f71244bb95c5"),
                            SocialMediaName = "line"
                        },
                        new
                        {
                            Id = new Guid("643e5bcf-ce75-4417-8408-7ee68e754ac5"),
                            SocialMediaName = "Sina Weibo"
                        },
                        new
                        {
                            Id = new Guid("13acccd4-5e40-436c-9c48-a53efdba0420"),
                            SocialMediaName = "Snapchat"
                        },
                        new
                        {
                            Id = new Guid("fd8aa000-38a8-48c2-9ac4-1f663e92d425"),
                            SocialMediaName = "Pinterest"
                        },
                        new
                        {
                            Id = new Guid("71110a66-8dcd-45f8-aef4-727ef9cb901d"),
                            SocialMediaName = "LinkedIn"
                        },
                        new
                        {
                            Id = new Guid("a2d71eba-11d3-470a-9bdf-85008109a08c"),
                            SocialMediaName = "Reddit"
                        },
                        new
                        {
                            Id = new Guid("100b0d53-839a-4716-a81d-1e53aa873665"),
                            SocialMediaName = "Taringa"
                        },
                        new
                        {
                            Id = new Guid("d0c2d449-02dc-4fdf-8082-e5404a715a52"),
                            SocialMediaName = "Foursquare"
                        },
                        new
                        {
                            Id = new Guid("cec67efa-ad85-4e7e-8a14-59e04300dc54"),
                            SocialMediaName = "Badoo"
                        },
                        new
                        {
                            Id = new Guid("382a57c0-79da-4ae2-9429-fb49b8d310e6"),
                            SocialMediaName = "Myspace"
                        },
                        new
                        {
                            Id = new Guid("33b82c91-e396-42b9-8e25-3a41ff9bb24b"),
                            SocialMediaName = "YouTube"
                        },
                        new
                        {
                            Id = new Guid("6388ca40-e101-4b96-a9bc-26dd7b8d59c5"),
                            SocialMediaName = "Upstream"
                        },
                        new
                        {
                            Id = new Guid("e646aa36-95e3-4bd8-8313-ba188c31df65"),
                            SocialMediaName = "MeetMe"
                        },
                        new
                        {
                            Id = new Guid("4035e0b8-2291-4ee5-906f-f3fbf7023435"),
                            SocialMediaName = "Vero"
                        },
                        new
                        {
                            Id = new Guid("97be673d-0797-4e67-98d8-c17bd91ff3fc"),
                            SocialMediaName = "TikTok"
                        },
                        new
                        {
                            Id = new Guid("a99cea82-7ae5-4842-8cb4-ad79f7fc0f13"),
                            SocialMediaName = "WT Social"
                        },
                        new
                        {
                            Id = new Guid("cb35de41-58b5-45f8-84fd-bb4da0174066"),
                            SocialMediaName = "Caffeine"
                        },
                        new
                        {
                            Id = new Guid("d61fff43-58ac-42a0-8e9e-7e88a9c30391"),
                            SocialMediaName = "italki"
                        },
                        new
                        {
                            Id = new Guid("1ee33bd6-c109-4b8e-9f43-8282a92cb2de"),
                            SocialMediaName = "Vimeo"
                        },
                        new
                        {
                            Id = new Guid("56c5b235-418f-4084-87c9-ce92e44b34b9"),
                            SocialMediaName = "Gab"
                        },
                        new
                        {
                            Id = new Guid("b637fbdf-3e17-4184-8179-f3a408793699"),
                            SocialMediaName = "Rumble"
                        },
                        new
                        {
                            Id = new Guid("b2f9bff2-703e-4a41-abe8-72771581e725"),
                            SocialMediaName = "Parler"
                        },
                        new
                        {
                            Id = new Guid("79493997-5488-4732-bbc4-aa3cb44aa941"),
                            SocialMediaName = "Odysee"
                        },
                        new
                        {
                            Id = new Guid("a4f121e8-a200-4665-8a95-53c498a1d99f"),
                            SocialMediaName = "Github"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.LotEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LotName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<decimal>("Price")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Lots");
                });

            modelBuilder.Entity("Api.Domain.Entities.SocialMediaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("SocialMedia")
                        .HasColumnType("text");

                    b.Property<Guid?>("SpeakerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UrlSocialMedia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("Api.Domain.Entities.SpeakerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiniResume")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("SpeakerEmail")
                        .HasColumnType("text");

                    b.Property<string>("SpeakerImage")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SpeakerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SpeakerPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("Api.Domain.Entities.SpeakerEventEntity", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpeakerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EventEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("EventId", "SpeakerId");

                    b.HasIndex("EventEntityId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("SpeakerEvents");
                });

            modelBuilder.Entity("Api.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateBirthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("UserImage")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a85bdbd8-6e5f-4038-be57-29f3d3e9d81e"),
                            IsActive = true,
                            Password = "123456",
                            Title = "Tecnologo",
                            UserEmail = "junior.garbage@gmail.com",
                            UserImage = "rosto.jpg",
                            UserName = "Junior",
                            UserType = "Admin"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.LotEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.EventEntity", "Event")
                        .WithMany("Lots")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Api.Domain.Entities.SocialMediaEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.EventEntity", "Event")
                        .WithMany("SocialMedias")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Domain.Entities.SpeakerEntity", "Speaker")
                        .WithMany("SocialMedias")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Event");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("Api.Domain.Entities.SpeakerEventEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.EventEntity", null)
                        .WithMany("Speakers")
                        .HasForeignKey("EventEntityId");

                    b.HasOne("Api.Domain.Entities.ListSocialMediaEntity", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.SpeakerEntity", "Speaker")
                        .WithMany("SpeakerEvents")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("Api.Domain.Entities.EventEntity", b =>
                {
                    b.Navigation("Lots");

                    b.Navigation("SocialMedias");

                    b.Navigation("Speakers");
                });

            modelBuilder.Entity("Api.Domain.Entities.SpeakerEntity", b =>
                {
                    b.Navigation("SocialMedias");

                    b.Navigation("SpeakerEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
