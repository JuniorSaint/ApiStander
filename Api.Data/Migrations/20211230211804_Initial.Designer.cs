// <auto-generated />
using System;
using Api.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211230211804_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Domain.Entities.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventImage")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<TimeSpan>("EventTime")
                        .HasColumnType("interval");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PeopleAmount")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Api.Domain.Entities.ListSocialMediaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SocialMediaName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ListSocialMedias");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c889da3c-22f0-4ee4-b3a0-3e00708f5064"),
                            SocialMediaName = "Facebook"
                        },
                        new
                        {
                            Id = new Guid("a951494c-b327-4bab-b42e-6c0a9dca8270"),
                            SocialMediaName = "Instagram"
                        },
                        new
                        {
                            Id = new Guid("cb71d345-582e-49de-8457-802ff7916c77"),
                            SocialMediaName = "Gettr"
                        },
                        new
                        {
                            Id = new Guid("52f47efe-628b-4df0-8e28-c49d9cac9d78"),
                            SocialMediaName = "Telegram"
                        },
                        new
                        {
                            Id = new Guid("587a5277-78bb-40b7-9147-11093a5fdc27"),
                            SocialMediaName = "WeChat"
                        },
                        new
                        {
                            Id = new Guid("ac0d56e4-f7ea-4608-a826-8a2c3a348344"),
                            SocialMediaName = "QZone"
                        },
                        new
                        {
                            Id = new Guid("d49e60d3-0a1c-4e6e-b4a5-5042b010406c"),
                            SocialMediaName = "Tumblr"
                        },
                        new
                        {
                            Id = new Guid("1c1cc05e-ce3a-4352-8134-31e0b56007a3"),
                            SocialMediaName = "Twitter"
                        },
                        new
                        {
                            Id = new Guid("498833e8-8cb4-4fda-9124-7ee4726295e1"),
                            SocialMediaName = "Google+"
                        },
                        new
                        {
                            Id = new Guid("29042f90-2df2-4b32-bdbe-4097c647366b"),
                            SocialMediaName = "Skype"
                        },
                        new
                        {
                            Id = new Guid("78aa886b-545e-42f2-8f72-ee825eb8a46c"),
                            SocialMediaName = "Viber"
                        },
                        new
                        {
                            Id = new Guid("ec872165-bf74-47e7-b6d7-78e11559d53e"),
                            SocialMediaName = "line"
                        },
                        new
                        {
                            Id = new Guid("be57d109-c83e-475f-998c-97586d324b21"),
                            SocialMediaName = "Sina Weibo"
                        },
                        new
                        {
                            Id = new Guid("6b639348-b483-4e2d-bfcd-2715e4179ea2"),
                            SocialMediaName = "Snapchat"
                        },
                        new
                        {
                            Id = new Guid("2ede3eb6-3e78-47db-97a1-2a1fc94ea07e"),
                            SocialMediaName = "Pinterest"
                        },
                        new
                        {
                            Id = new Guid("7e21aac0-f815-468e-901b-444ccd6781a3"),
                            SocialMediaName = "LinkedIn"
                        },
                        new
                        {
                            Id = new Guid("cc0a5955-08bc-4b93-9871-d6812c0db83a"),
                            SocialMediaName = "Reddit"
                        },
                        new
                        {
                            Id = new Guid("7b8defbe-646d-4031-94b8-57961c07ccdf"),
                            SocialMediaName = "Taringa"
                        },
                        new
                        {
                            Id = new Guid("e070cce7-ff24-4cdc-9b39-36dc8d64bf23"),
                            SocialMediaName = "Foursquare"
                        },
                        new
                        {
                            Id = new Guid("3fc33bad-f465-48aa-8919-0f8cc119d29a"),
                            SocialMediaName = "Badoo"
                        },
                        new
                        {
                            Id = new Guid("8a82d2c6-9ae7-417e-8b19-f36b5ed6778f"),
                            SocialMediaName = "Myspace"
                        },
                        new
                        {
                            Id = new Guid("47945d9d-5fd0-4642-859f-c205330b09eb"),
                            SocialMediaName = "YouTube"
                        },
                        new
                        {
                            Id = new Guid("3f54d9b4-22ef-46ab-9abb-7bb4a56c6482"),
                            SocialMediaName = "Upstream"
                        },
                        new
                        {
                            Id = new Guid("82f2daa9-ed11-45b6-8646-cc8bca3ab486"),
                            SocialMediaName = "MeetMe"
                        },
                        new
                        {
                            Id = new Guid("0a6a00e7-a3a1-48a1-a859-50528cb1927c"),
                            SocialMediaName = "Vero"
                        },
                        new
                        {
                            Id = new Guid("53eefe41-f282-44f7-a6c1-87762537a1c1"),
                            SocialMediaName = "TikTok"
                        },
                        new
                        {
                            Id = new Guid("af1b1374-4230-4600-a905-c1d8aa463a8b"),
                            SocialMediaName = "WT Social"
                        },
                        new
                        {
                            Id = new Guid("dbdd672a-c688-4999-a281-6540ebce79de"),
                            SocialMediaName = "Caffeine"
                        },
                        new
                        {
                            Id = new Guid("2353978e-c8b2-4b42-a189-34787ddecf44"),
                            SocialMediaName = "italki"
                        },
                        new
                        {
                            Id = new Guid("74e705b9-ee1a-42e3-a1af-f60494343890"),
                            SocialMediaName = "Vimeo"
                        },
                        new
                        {
                            Id = new Guid("b04dddbd-922e-4443-94c5-babcfe4bde3e"),
                            SocialMediaName = "Gab"
                        },
                        new
                        {
                            Id = new Guid("ff35d7d0-3b8a-46d6-9f73-deca0b04ce9e"),
                            SocialMediaName = "Rumble"
                        },
                        new
                        {
                            Id = new Guid("3002e49a-70a0-418b-bda6-c994d998464c"),
                            SocialMediaName = "Parler"
                        },
                        new
                        {
                            Id = new Guid("25f88e15-0624-464a-b540-e064e8ce7f93"),
                            SocialMediaName = "Odysee"
                        },
                        new
                        {
                            Id = new Guid("10ab0383-ad73-438f-ae48-3511d18eff93"),
                            SocialMediaName = "Github"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.LotEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LotName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<decimal>("Price")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Lots");
                });

            modelBuilder.Entity("Api.Domain.Entities.SocialMediaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("SocialMedia")
                        .HasColumnType("text");

                    b.Property<Guid?>("SpeakerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UrlSocialMedia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("Api.Domain.Entities.SpeakerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiniResume")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("SpeakerEmail")
                        .HasColumnType("text");

                    b.Property<string>("SpeakerImage")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SpeakerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SpeakerPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("Api.Domain.Entities.SpeakerEventEntity", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpeakerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EventEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("EventId", "SpeakerId");

                    b.HasIndex("EventEntityId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("SpeakerEvents");
                });

            modelBuilder.Entity("Api.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("UserImage")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4717560f-c9be-44b5-aa17-4d53effcb278"),
                            IsActive = true,
                            Password = "123456",
                            Title = "Tecnologo",
                            UserEmail = "junior.garbage@gmail.com",
                            UserImage = "rosto.jpg",
                            UserName = "Junior",
                            UserType = "Admin"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.LotEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.EventEntity", "Event")
                        .WithMany("Lots")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Api.Domain.Entities.SocialMediaEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.EventEntity", "Event")
                        .WithMany("SocialMedias")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Domain.Entities.SpeakerEntity", "Speaker")
                        .WithMany("SocialMedias")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Event");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("Api.Domain.Entities.SpeakerEventEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.EventEntity", null)
                        .WithMany("Speakers")
                        .HasForeignKey("EventEntityId");

                    b.HasOne("Api.Domain.Entities.ListSocialMediaEntity", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.SpeakerEntity", "Speaker")
                        .WithMany("SpeakerEvents")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("Api.Domain.Entities.EventEntity", b =>
                {
                    b.Navigation("Lots");

                    b.Navigation("SocialMedias");

                    b.Navigation("Speakers");
                });

            modelBuilder.Entity("Api.Domain.Entities.SpeakerEntity", b =>
                {
                    b.Navigation("SocialMedias");

                    b.Navigation("SpeakerEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
